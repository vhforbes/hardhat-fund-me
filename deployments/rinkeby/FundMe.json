{
  "address": "0xAe71b65a77Bde184C5390b6238e72F8bC50Ac0C4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "Fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmmoutFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb7b0701a43b43817f297294400baaa25f291027809deba640bd6131e0de8ebeb",
  "receipt": {
    "to": null,
    "from": "0xce8C6d41a365F39ba8603DdE49d95a968EfD07ed",
    "contractAddress": "0xAe71b65a77Bde184C5390b6238e72F8bC50Ac0C4",
    "transactionIndex": 4,
    "gasUsed": "1011147",
    "logsBloom": "0x
    "blockHash": "0x0edb6934b4b72bfd5d270649515209ba437c150182f88902169cd5a14d6d339a",
    "transactionHash": "0xb7b0701a43b43817f297294400baaa25f291027809deba640bd6131e0de8ebeb",
    "logs": [],
    "blockNumber": 10913695,
    "cumulativeGasUsed": "6632704",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "368eb788ef9028e072cc163a8236c0d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmmoutFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Forbes\",\"details\":\"Implements a pricefeed\",\"kind\":\"dev\",\"methods\":{\"Fund()\":{\"details\":\"uses getConversionRate function from other contract\"},\"Withdraw()\":{\"details\":\"resets the s_funders array\"}},\"title\":\"Crowdfunding contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"Fund()\":{\"notice\":\"Send ETH to the contract\"},\"Withdraw()\":{\"notice\":\"Withdraw funds from contract\"}},\"notice\":\"A demo for funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIt\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe_NotOwner();\\n\\n/** @title Crowdfunding contract\\n * @author Forbes\\n * @notice A demo for funding contract\\n * @dev Implements a pricefeed\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe_NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /** @notice Send ETH to the contract\\n     *  @dev uses getConversionRate function from other contract\\n     */\\n    function Fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        );\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    /** @notice Withdraw funds from contract\\n     *  @dev resets the s_funders array\\n     */\\n    function Withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // saved the s_funders to the memory so i can loop it without having to\\n        // read from storage every time it loops\\n        address[] memory funders = s_funders;\\n\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        // (bool callSuccess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess);\\n    }\\n\\n    //Getter functions to facilitate interaction with the contract\\n    // and making the variables private result in cheaper gas!\\n    // View / Pure functions\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmmoutFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    // What if someone send eth to the contract without the fund function?\\n    receive() external payable {\\n        Fund();\\n    }\\n\\n    fallback() external payable {\\n        Fund();\\n    }\\n}\\n\",\"keccak256\":\"0xdaf4a9c68df19fedd435d4aa1fa216def5972d40c525354ddbb7cb239f84a4db\",\"license\":\"MIt\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIt\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  // Gets ETH value in usd\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // These commas , ,,, means the unused arguments\\n    (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n    // Price = ETH in terms of usd\\n    // 300000000000  // Value is 3000, but comes with 8 decimals 3000.00000000\\n    // Need to match the decimals in eth(1e18) and the usd value\\n\\n    // Converting to uint256 and matching decimals\\n    return uint256(price * 1e10);\\n  }\\n\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x0d37defd8b2e960af22564f415769e0aa2955798f360e0248838482d85bd9298\",\"license\":\"MIt\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200127338038062001273833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110ed620001866000396000818161032401528181610572015281816105c201526107b801526110ed6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101145780639e87a5cd1461013f578063be2693f01461016a578063d7b4750c146101745761008e565b8063127a7c361461009857806357ea89b6146100d55780636b69a592146100df5780636ce1417e1461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a7b565b6102d9565b6040516100cc9190610ac1565b60405180910390f35b6100dd610322565b005b3480156100eb57600080fd5b506100f4610562565b6040516101019190610ac1565b60405180910390f35b6101126101b1565b005b34801561012057600080fd5b5061012961056e565b6040516101369190610aeb565b60405180910390f35b34801561014b57600080fd5b50610154610596565b6040516101619190610b65565b60405180910390f35b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bac565b61084e565b6040516101a89190610aeb565b60405180910390f35b678ac7230489e800006101ef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089590919063ffffffff16565b1015610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610c36565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104525760008082815481106103cc576103cb610c56565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044a90610cb4565b9150506103aa565b50600067ffffffffffffffff81111561046e5761046d610cfd565b5b60405190808252806020026020018201604052801561049c5781602001602082028036833780820191505090505b50600090805190602001906104b2929190610971565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d990610d5d565b60006040518083038185875af1925050503d8060008114610516576040519150601f19603f3d011682016040523d82523d6000602084013e61051b565b606091505b505090508061055f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055690610dbe565b60405180910390fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067e575b5050505050905060005b81518110156107535760008282815181106106f0576106ef610c56565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610cb4565b9150506106d2565b50600067ffffffffffffffff81111561076f5761076e610cfd565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600090805190602001906107b3929190610971565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107fa90610d5d565b60006040518083038185875af1925050503d8060008114610837576040519150601f19603f3d011682016040523d82523d6000602084013e61083c565b606091505b505090508061084a57600080fd5b5050565b600080828154811061086357610862610c56565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a1836108d1565b90506000670de0b6b3a764000085836108ba9190610dde565b6108c49190610e67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190610f25565b5050509150506402540be400816109699190610fa0565b915050919050565b8280548282559060005260206000209081019282156109ea579160200282015b828111156109e95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610991565b5b5090506109f791906109fb565b5090565b5b80821115610a145760008160009055506001016109fc565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4882610a1d565b9050919050565b610a5881610a3d565b8114610a6357600080fd5b50565b600081359050610a7581610a4f565b92915050565b600060208284031215610a9157610a90610a18565b5b6000610a9f84828501610a66565b91505092915050565b6000819050919050565b610abb81610aa8565b82525050565b6000602082019050610ad66000830184610ab2565b92915050565b610ae581610a3d565b82525050565b6000602082019050610b006000830184610adc565b92915050565b6000819050919050565b6000610b2b610b26610b2184610a1d565b610b06565b610a1d565b9050919050565b6000610b3d82610b10565b9050919050565b6000610b4f82610b32565b9050919050565b610b5f81610b44565b82525050565b6000602082019050610b7a6000830184610b56565b92915050565b610b8981610aa8565b8114610b9457600080fd5b50565b600081359050610ba681610b80565b92915050565b600060208284031215610bc257610bc1610a18565b5b6000610bd084828501610b97565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c20601283610bd9565b9150610c2b82610bea565b602082019050919050565b60006020820190508181036000830152610c4f81610c13565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbf82610aa8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf257610cf1610c85565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d47600083610d2c565b9150610d5282610d37565b600082019050919050565b6000610d6882610d3a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da8600b83610bd9565b9150610db382610d72565b602082019050919050565b60006020820190508181036000830152610dd781610d9b565b9050919050565b6000610de982610aa8565b9150610df483610aa8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e2d57610e2c610c85565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7282610aa8565b9150610e7d83610aa8565b925082610e8d57610e8c610e38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb781610e98565b8114610ec257600080fd5b50565b600081519050610ed481610eae565b92915050565b6000819050919050565b610eed81610eda565b8114610ef857600080fd5b50565b600081519050610f0a81610ee4565b92915050565b600081519050610f1f81610b80565b92915050565b600080600080600060a08688031215610f4157610f40610a18565b5b6000610f4f88828901610ec5565b9550506020610f6088828901610efb565b9450506040610f7188828901610f10565b9350506060610f8288828901610f10565b9250506080610f9388828901610ec5565b9150509295509295909350565b6000610fab82610eda565b9150610fb683610eda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ff557610ff4610c85565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561103257611031610c85565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561106f5761106e610c85565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ac576110ab610c85565b5b82820290509291505056fea2646970667358221220916db0d2e71128603783abc469838337e4b02546b9664b526561615459075c7a64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101145780639e87a5cd1461013f578063be2693f01461016a578063d7b4750c146101745761008e565b8063127a7c361461009857806357ea89b6146100d55780636b69a592146100df5780636ce1417e1461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a7b565b6102d9565b6040516100cc9190610ac1565b60405180910390f35b6100dd610322565b005b3480156100eb57600080fd5b506100f4610562565b6040516101019190610ac1565b60405180910390f35b6101126101b1565b005b34801561012057600080fd5b5061012961056e565b6040516101369190610aeb565b60405180910390f35b34801561014b57600080fd5b50610154610596565b6040516101619190610b65565b60405180910390f35b6101726105c0565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bac565b61084e565b6040516101a89190610aeb565b60405180910390f35b678ac7230489e800006101ef600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089590919063ffffffff16565b1015610230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022790610c36565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104525760008082815481106103cc576103cb610c56565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044a90610cb4565b9150506103aa565b50600067ffffffffffffffff81111561046e5761046d610cfd565b5b60405190808252806020026020018201604052801561049c5781602001602082028036833780820191505090505b50600090805190602001906104b2929190610971565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d990610d5d565b60006040518083038185875af1925050503d8060008114610516576040519150601f19603f3d011682016040523d82523d6000602084013e61051b565b606091505b505090508061055f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055690610dbe565b60405180910390fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610645576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067e575b5050505050905060005b81518110156107535760008282815181106106f0576106ef610c56565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074b90610cb4565b9150506106d2565b50600067ffffffffffffffff81111561076f5761076e610cfd565b5b60405190808252806020026020018201604052801561079d5781602001602082028036833780820191505090505b50600090805190602001906107b3929190610971565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107fa90610d5d565b60006040518083038185875af1925050503d8060008114610837576040519150601f19603f3d011682016040523d82523d6000602084013e61083c565b606091505b505090508061084a57600080fd5b5050565b600080828154811061086357610862610c56565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a1836108d1565b90506000670de0b6b3a764000085836108ba9190610dde565b6108c49190610e67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109529190610f25565b5050509150506402540be400816109699190610fa0565b915050919050565b8280548282559060005260206000209081019282156109ea579160200282015b828111156109e95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610991565b5b5090506109f791906109fb565b5090565b5b80821115610a145760008160009055506001016109fc565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4882610a1d565b9050919050565b610a5881610a3d565b8114610a6357600080fd5b50565b600081359050610a7581610a4f565b92915050565b600060208284031215610a9157610a90610a18565b5b6000610a9f84828501610a66565b91505092915050565b6000819050919050565b610abb81610aa8565b82525050565b6000602082019050610ad66000830184610ab2565b92915050565b610ae581610a3d565b82525050565b6000602082019050610b006000830184610adc565b92915050565b6000819050919050565b6000610b2b610b26610b2184610a1d565b610b06565b610a1d565b9050919050565b6000610b3d82610b10565b9050919050565b6000610b4f82610b32565b9050919050565b610b5f81610b44565b82525050565b6000602082019050610b7a6000830184610b56565b92915050565b610b8981610aa8565b8114610b9457600080fd5b50565b600081359050610ba681610b80565b92915050565b600060208284031215610bc257610bc1610a18565b5b6000610bd084828501610b97565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c20601283610bd9565b9150610c2b82610bea565b602082019050919050565b60006020820190508181036000830152610c4f81610c13565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbf82610aa8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf257610cf1610c85565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d47600083610d2c565b9150610d5282610d37565b600082019050919050565b6000610d6882610d3a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da8600b83610bd9565b9150610db382610d72565b602082019050919050565b60006020820190508181036000830152610dd781610d9b565b9050919050565b6000610de982610aa8565b9150610df483610aa8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e2d57610e2c610c85565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7282610aa8565b9150610e7d83610aa8565b925082610e8d57610e8c610e38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb781610e98565b8114610ec257600080fd5b50565b600081519050610ed481610eae565b92915050565b6000819050919050565b610eed81610eda565b8114610ef857600080fd5b50565b600081519050610f0a81610ee4565b92915050565b600081519050610f1f81610b80565b92915050565b600080600080600060a08688031215610f4157610f40610a18565b5b6000610f4f88828901610ec5565b9550506020610f6088828901610efb565b9450506040610f7188828901610f10565b9350506060610f8288828901610f10565b9250506080610f9388828901610ec5565b9150509295509295909350565b6000610fab82610eda565b9150610fb683610eda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ff557610ff4610c85565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561103257611031610c85565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561106f5761106e610c85565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ac576110ab610c85565b5b82820290509291505056fea2646970667358221220916db0d2e71128603783abc469838337e4b02546b9664b526561615459075c7a64736f6c63430008080033",
  "devdoc": {
    "author": "Forbes",
    "details": "Implements a pricefeed",
    "kind": "dev",
    "methods": {
      "Fund()": {
        "details": "uses getConversionRate function from other contract"
      },
      "Withdraw()": {
        "details": "resets the s_funders array"
      }
    },
    "title": "Crowdfunding contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "Fund()": {
        "notice": "Send ETH to the contract"
      },
      "Withdraw()": {
        "notice": "Withdraw funds from contract"
      }
    },
    "notice": "A demo for funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}