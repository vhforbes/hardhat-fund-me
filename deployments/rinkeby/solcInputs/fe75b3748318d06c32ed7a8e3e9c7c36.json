{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIt\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror Unauthorized();\n\ncontract FundMe {\n  // Attach the priceConverter to uint256\n  using PriceConverter for uint256;\n\n  //constant => cheaper gas\n  uint256 public constant MINIMUM_USD = 10 * 1e18;\n\n  address[] public funders;\n  // Relate the address with the value funded\n  mapping(address => uint256) public addressToAmountFunded;\n\n  AggregatorV3Interface public priceFeed;\n\n  address public immutable i_owner;\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  // Send ETH to the contract\n  function fund() public payable {\n    // a.getConversionRate() (a is considered the first parameter)\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"Didn't send enough\"\n    );\n\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  // Withdraw funds from contract\n  function Withdraw() public onlyOwner {\n    // Reset the funders array values\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      addressToAmountFunded[funder] = 0;\n    }\n\n    // Reset array - 0 means the numbers of objects inside the starting array\n    funders = new address[](0);\n\n    // //transfer\n    // payable(msg.sender).transfer(address(this).balance);\n    // //send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\");\n\n    // call, returns a boolean if the call is a success\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n\n    // Reverts if not owner (modifier)\n    revert();\n  }\n\n  // Function will do this before executing the code\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) {\n      revert Unauthorized();\n    }\n    // // Less gas efficient\n    // require(msg.sender == i_owner, \"Sender is not owner!\");\n    _;\n  }\n\n  // What if someone send eth to the contract without the fund function?\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIt\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  // Gets ETH value in usd\n  function getPrice(AggregatorV3Interface priceFeed)\n    public\n    view\n    returns (uint256)\n  {\n    // These commas , ,,, means the unused arguments\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n\n    // Price = ETH in terms of usd\n    // 300000000000  // Value is 3000, but comes with 8 decimals 3000.00000000\n    // Need to match the decimals in eth(1e18) and the usd value\n\n    // Converting to uint256 and matching decimals\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/mock/MockV3Aggregator.sol": {
      "content": "// // SPDX-License-Identifier: MIt\n// pragma solidity ^0.6.0;\n\n// import \"@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}