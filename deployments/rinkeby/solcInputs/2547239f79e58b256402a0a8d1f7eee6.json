{
  "language": "Solidity",
  "sources": {
    "contracts/examples/FunWithStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract FunWithStorage {\n    uint256 favoriteNumber; // Stored at slot 0\n    bool someBool; // Stored at slot 1\n    uint256[] myArray; /* Array Length Stored at slot 2,\n    but the objects will be the keccak256(2), since 2 is the storage slot of the array */\n    mapping(uint256 => bool) myMap; /* An empty slot is held at slot 3\n    and the elements will be stored at keccak256(h(k) . p)\n    p: The storage slot (aka, 3)\n    k: The key in hex\n    h: Some function based on the type. For uint256, it just pads the hex\n    */\n    uint256 constant NOT_IN_STORAGE = 123;\n    uint256 immutable i_not_in_storage;\n\n    constructor() {\n        favoriteNumber = 25; // See stored spot above // SSTORE\n        someBool = true; // See stored spot above // SSTORE\n        myArray.push(222); // SSTORE\n        myMap[0] = true; // SSTORE\n        i_not_in_storage = 123;\n    }\n\n    function doStuff() public {\n        uint256 newVar = favoriteNumber + 1; // SLOAD\n        bool otherVar = someBool; // SLOAD\n        // ^^ memory variables\n    }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIt\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe_NotOwner();\n\n/** @title Crowdfunding contract\n * @author Forbes\n * @notice A demo for funding contract\n * @dev Implements a pricefeed\n */\ncontract FundMe {\n    // Type declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\n    address public immutable i_owner;\n    address[] public s_funders;\n    mapping(address => uint256) public s_addressToAmountFunded;\n    AggregatorV3Interface public s_priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe_NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    /** @notice Send ETH to the contract\n     *  @dev uses getConversionRate function from other contract\n     */\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough\"\n        );\n\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    /** @notice Withdraw funds from contract\n     *  @dev resets the s_funders array\n     */\n    function Withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        // saved the s_funders to the memory so i can loop it without paying so much\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        // (bool callSuccess, ) = payable(msg.sender).call{\n        //     value: address(this).balance\n        // }(\"\");\n\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(callSuccess);\n    }\n\n    // What if someone send eth to the contract without the fund function?\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIt\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  // Gets ETH value in usd\n  function getPrice(AggregatorV3Interface priceFeed)\n    public\n    view\n    returns (uint256)\n  {\n    // These commas , ,,, means the unused arguments\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n\n    // Price = ETH in terms of usd\n    // 300000000000  // Value is 3000, but comes with 8 decimals 3000.00000000\n    // Need to match the decimals in eth(1e18) and the usd value\n\n    // Converting to uint256 and matching decimals\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}